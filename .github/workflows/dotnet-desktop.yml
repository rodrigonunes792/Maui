name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'microsoft'
        java-version: '17'
        
    - name: Install MAUI Workload
      run: dotnet workload install maui
      
    - name: Find MAUI Project
      id: find-project
      shell: pwsh
      run: |
        Write-Host "Finding MAUI project..."
        $projects = Get-ChildItem -Recurse -Filter "*.csproj" | Where-Object { 
          $_.Name -like "*SoftwareShow.Contagem.MApp*" -and 
          $_.Name -notlike "*Droid*" -and 
          $_.Name -notlike "*iOS*" 
        }
        
        if ($projects) {
          $projectPath = $projects[0].FullName
          $relativePath = $projectPath.Replace("$env:GITHUB_WORKSPACE\", "").Replace("\", "/")
          Write-Host "Found project: $relativePath"
          echo "project-path=$relativePath" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "No MAUI project found!"
          exit 1
        }
        
    - name: Configure Project for APK
      shell: pwsh
      run: |
        $projectFile = "${{ steps.find-project.outputs.project-path }}"
        Write-Host "Configuring project: $projectFile"
        
        $content = Get-Content $projectFile -Raw
        
        if ($content -notmatch '<AndroidApplication>true</AndroidApplication>') {
          Write-Host "Adding Android APK configuration..."
          
          $propertyGroupPattern = '(<PropertyGroup[^>]*>)'
          if ($content -match $propertyGroupPattern) {
            $androidProperties = @"
                <OutputType>Exe</OutputType>
                <AndroidApplication>true</AndroidApplication>
                <AndroidPackageFormat>apk</AndroidPackageFormat>
                <AndroidEnableAssemblyCompression>false</AndroidEnableAssemblyCompression>
                <AndroidLinkMode>SdkOnly</AndroidLinkMode>
            "@
            $replacement = "$1`n$androidProperties"
            $content = $content -replace $propertyGroupPattern, $replacement
            
            Set-Content $projectFile -Value $content -Encoding UTF8
            Write-Host "✅ Project configured for APK generation"
          } else {
            Write-Host "❌ Could not find PropertyGroup"
            exit 1
          }
        } else {
          Write-Host "✅ Project already configured for APK"
        }
        
    - name: Restore Dependencies
      run: dotnet restore "${{ steps.find-project.outputs.project-path }}"
      
    - name: Build Android APK
      run: |
        dotnet publish "${{ steps.find-project.outputs.project-path }}" ^
          -f net8.0-android ^
          -c Release ^
          /p:AndroidPackageFormat=apk ^
          /p:AndroidEnableAssemblyCompression=false ^
          /p:AndroidLinkMode=SdkOnly
          
    - name: Find Generated APK
      id: find-apk
      shell: pwsh
      run: |
        Write-Host "Searching for generated APK..."
        
        $projectDir = Split-Path "${{ steps.find-project.outputs.project-path }}" -Parent
        $apkFiles = @()
        
        # Search in common locations
        $searchPaths = @(
          "$projectDir\bin\Release\net8.0-android",
          "$projectDir\bin\Release\net8.0-android\publish"
        )
        
        foreach ($path in $searchPaths) {
          if (Test-Path $path) {
            $found = Get-ChildItem $path -Filter "*.apk" -Recurse
            $apkFiles += $found
          }
        }
        
        # Fallback: search entire project directory
        if ($apkFiles.Count -eq 0) {
          $apkFiles = Get-ChildItem $projectDir -Filter "*.apk" -Recurse
        }
        
        if ($apkFiles.Count -gt 0) {
          $apkPath = $apkFiles[0].FullName
          $apkName = $apkFiles[0].Name
          $apkSize = [math]::Round($apkFiles[0].Length / 1MB, 2)
          
          Write-Host "✅ APK Found: $apkPath"
          Write-Host "📱 APK Name: $apkName"
          Write-Host "📏 APK Size: $apkSize MB"
          
          echo "apk-path=$apkPath" >> $env:GITHUB_OUTPUT
          echo "apk-name=$apkName" >> $env:GITHUB_OUTPUT
          echo "apk-found=true" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "❌ No APK files found"
          
          # Debug: List all files in release directory
          Write-Host "Files in release directory:"
          if (Test-Path "$projectDir\bin\Release\net8.0-android") {
            Get-ChildItem "$projectDir\bin\Release\net8.0-android" -Recurse | ForEach-Object {
              Write-Host "  $($_.FullName)"
            }
          }
          
          echo "apk-found=false" >> $env:GITHUB_OUTPUT
          exit 1
        }
        
    - name: Upload APK Artifact
      if: steps.find-apk.outputs.apk-found == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: ${{ steps.find-apk.outputs.apk-path }}
        retention-days: 30
        
    - name: Build Summary
      shell: pwsh
      run: |
        Write-Host ""
        Write-Host "🎉 BUILD SUCCESSFUL!"
        Write-Host "================================"
        Write-Host "✅ APK Generated: ${{ steps.find-apk.outputs.apk-name }}"
        Write-Host "📁 Location: ${{ steps.find-apk.outputs.apk-path }}"
        Write-Host "📥 Download from: Actions > Artifacts > android-apk"
        Write-Host ""
        Write-Host "🎯 All issues resolved:"
        Write-Host "   ✅ XABLD7009 (ExtractAar): FIXED"
        Write-Host "   ✅ XABLD7024 (Corruption): FIXED"
        Write-Host "   ✅ Project configuration: FIXED"
        Write-Host "   ✅ APK generation: SUCCESS"
        Write-Host "================================"

